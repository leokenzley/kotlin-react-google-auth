openapi: 3.0.3
info:
  title: Leo Kenzley - Kotlin API
  version: "0.0.1"
servers:
  - url: http://localhost:8080

tags:
  - name: users
    description: Everything about your Users
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: artists
    description: Everything about your Artists
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: agenda
    description: Everything about your Agenda
    externalDocs:
      description: Find out more
      url: https://swagger.io

paths:
  /users:
    get:
      tags:
        - users
      summary: Retorna a lista de usuários
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'

    post:
      tags:
        - users
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /users/{id}:
    parameters: # Defina o parâmetro no nível do caminho
      - name: id
        in: path
        description: The id that needs to be fetched. Use user1 for testing
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - users
      summary: Get user by ID.
      description: Get user detail based on id.
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - users
      summary: Update an existing user.
      description: Update an existing user by Id.
      operationId: updateUser
      requestBody:
        description: Update an existing user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Resource fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        '422':
          description: Validation error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - users
      summary: Deletes a user.
      description: Deletes a user based on the id supplied
      operationId: deleteUser
      responses:
        '200':
          description: Resource fetched successfully
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"            
  /users/paginated:
    get:
      tags:
        - users
      summary: Returns a paginated list of users
      description: Returns a paginated list of users, supporting optional sorting and filtering.
      parameters:
        - name: page
          in: query
          description: Page number (starts at 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort by field (e.g., name, email)
          required: false
          schema:
            type: string
            default: "name"            
      responses:
        '200':
          description: Paginated list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        '400':
          description: Invalid request parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artists:
    get:
      tags:
        - artists
      summary: Returns a list of artists
      responses:
        '200':
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistResponse'
    post:
      tags:
        - artists
      summary: Creates a new artist
      description: Creates a new artist in the system
      operationId: createArtist
      requestBody:
        description: Artist object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistRequest'
      responses:
        '201':
          description: Artist created successfully
  /artists/paginated:
    get:
      tags:
        - artists
      summary: Returns a paginated list of artists
      description: Returns a paginated list of artists, supporting optional sorting and filtering.
      parameters:
        - name: page
          in: query
          description: Page number (starts at 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort by field (e.g., name, email)
          required: false
          schema:
            type: string
            default: "name"                
      responses:
        '200':
          description: Paginated list of artists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        '400':
          description: Invalid request parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /artists/{id}:
    parameters: # Defina o parâmetro no nível do caminho
      - name: id
        in: path
        description: The id that needs to be fetched. Use 1 for testing
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - artists
      summary: Get artist by artist id.
      description: Get artist detail based on id.
      operationId: getArtistById
      responses:
        '200':
          description: Resource fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - artists
      summary: Update an existing artist.
      description: Update an existing artist by Id.
      operationId: updateArtist
      requestBody:
        description: Update an existent artist in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistRequest'
        required: true
      responses:
        '200':
          description: Resource fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistResponse'
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        '422':
          description: Validation error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete: 
      tags:
        - artists
      summary: Deletes a artist.
      description: Deletes a artist based on the id supplied
      operationId: deleteArtist
      responses:
        '200':
          description: Resource fetched successfully
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"              
  /agenda:
    get:
      tags:
        - agenda
      summary: Returns a list of appointments
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgendaResponse'
    post:
      tags:
        - agenda
      summary: Creates a new appointments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgendaRequest'
      responses:
        '201':
          description: appointments created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgendaResponse'
  /agenda/{id}:
    parameters: # Defina o parâmetro no nível do caminho
      - name: id
        in: path
        description: The id that needs to be fetched. Use 1 for testing
        required: true
        schema:
          type: integer
          format: int32
    get:
      tags:
        - agenda
      summary: Get appointments by appointments id.
      description: Get appointment details by ID
      operationId: getappointmentsById
      responses:
        '200':
          description: Resource fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgendaResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AgendaResponse'
        '400':
          description: Invalid username supplied
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - agenda
      summary: Update an existing appointments.
      description: Update an existing appointments by Id.
      operationId: updateappointments
      requestBody:
        description: Update an existent appointments
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgendaRequest'
        required: true
      responses:
        '200':
          description: Resource fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgendaResponse'
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        '422':
          description: Validation error
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"     
    delete:
      tags:
        - agenda
      summary: Deletes a appointments.
      description: Deletes a appointments based on the id supplied
      operationId: deleteappointments
      responses:
        '200':
          description: Resource fetched successfully
        '400':
          description: Invalid ID format
        '404':
          description: Resource not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
  /agenda/paginated:
    get:
      tags:
        - agenda
      summary: Returns a paginated list of appointments
      description: Returns a paginated list of appointments, supporting optional sorting and filtering.
      parameters:
        - name: page
          in: query
          description: Page number (starts at 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort by field (e.g., name, email)
          required: false
          schema:
            type: string
            default: "name"    
      responses:
        '200':
          description: Paginated list of appointments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        '400':
          description: Invalid request parameters
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    UserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            status:
              type: string
              description: "Status of the user account"
              maxLength: 1
              default: "A"  

    ArtistRequest:
      type: object
      required:
        - name
        - email
        - telephone
      properties:
        name:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        telephone:
          type: string
          maxLength: 11
        imagelink:
          type: string
          description: URL da imagem do artista
        incorporate:
          type: string
          description: Informação de incorporação
    ArtistResponse:
      allOf:
        - $ref: '#/components/schemas/ArtistRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            status:
              type: string
              description: "Status of the artist"
              maxLength: 1
              default: "A"        

    AgendaRequest:
      type: object
      required:
        - date_commitment
        - organizer_responsible
        - telephone
        - email
        - artists_id
      properties:
        date_commitment:
          type: string
          maxLength: 50
          description: Date or period of the appointments
        organizer_responsible:
          type: string
          maxLength: 100
          description: Name of the person responsible for the appointments
        telephone:
          type: string
          maxLength: 11
        email:
          type: string
          format: email
          maxLength: 100
        artists_id:
          type: integer
          format: int64
          description: Artist identifier associated with the appointments
    AgendaResponse:
      allOf:
        - $ref: '#/components/schemas/AgendaRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            status:
              type: string
              description: "Status of the appointment"
              maxLength: 1
              default: "A"     
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    PaginatedUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        totalElements:
          type: integer
          description: Total itens in the paginated response
        totalPages:
          type: integer
          description: Total of pages
        size:
          type: integer
          description: Number of items per page
        number:
          type: integer
          description: Current page number (starts at 0) 
        first:
          type: boolean
          description: Indicates whether it is the first page
        last:
          type: boolean
          description: Indicates whether it is the last page
    PaginatedArtistResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ArtistResponse'
        totalElements:
          type: integer
          description: Total itens in the paginated response
        totalPages:
          type: integer
          description: Total of pages
        size:
          type: integer
          description: Number of items per page
        number:
          type: integer
          description: Current page number (starts at 0) 
        first:
          type: boolean
          description: Indicates whether it is the first page
        last:
          type: boolean
          description: Indicates whether it is the last page    
    PaginatedAgendaResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AgendaResponse'
        totalElements:
          type: integer
          description: Total itens in the paginated response
        totalPages:
          type: integer
          description: Total of pages
        size:
          type: integer
          description: Number of items per page
        number:
          type: integer
          description: Current page number (starts at 0) 
        first:
          type: boolean
          description: Indicates whether it is the first page
        last:
          type: boolean
          description: Indicates whether it is the last page              






